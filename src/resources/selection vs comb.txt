
    Selection Sort

    Selection Sort also divides the array into a sorted and unsorted 
    sub array. Though, this time, the sorted sub array is formed by 
    inserting the minimum element of the unsorted sub array at the
    end of the sorted array. In each iteration, it is assumed that 
    the first unsorted element is the minimum and iterate through
    the rest to see if there is a smaller element. Once it is found     
    that the current minimum of the unsorted part of the array, 
    it is swapped with the first element and considered as a part 
    of the sorted array.


    Comb Sort

    The comb sort algorithm is an improved form of the bubble sort 
    algorithm and it is a simple comparison-based sorting algorithm.
    While bubble sort compares adjacent values and moves smaller 
    values (known as turtles) one position at a time to the front, 
    comb sort improves the efficiency of this technique by comparing
    values that are farther apart. This mechanism allows smaller 
    values at the end of the list to move several positions forward
    in a single pass, greatly reducing the overall number of swaps. 
    These larger distances between values are known as "gaps". 
    The comb sort algorithm uses a "shrink factor", usually 1.3,
    to calculate the optimum values for these gaps. The shrink factor 
    being 1.3 means that, after completing each phase, the gap is    
    divided by 1.3. The gaps grows smaller as comb sort continues the 
    sorting process, until the gap is 1. With a gap of 1, comb sort 
    is essentially performing a bubble sort.



    Asymptotic Comparison of Selection Sort and Comb Sort

    The best case time complexity of selection sort, is O(n log n). 
    This means that the time complexity of the selection sort
    algorithm will increase in proportion to the logarithm of 
    the input size, multiplied by the actual input size. This is known
    as the log-linear complexity. The average and worst complexities of
    selection sort are O(n^2) and O(n^2), just like bubble sort and 
    insertion sort. That is, the time complexity of selection sort will
    increase in proportion to the square of the input size in both its
    average case and worst case scenarios.

    The best case time complexity of the comb sort algorithm is also
    O(n log n). The average case time complexity is O(n2/2p), 
    where p is the number of increment, also known as the 'gap'. This     
    means that, in the average case scenario, the time complexity of 
    shell sort will increase in proportion to the square of the input 
    size n, divided by the value obtained when 2 is raised to the power
    of the gap value. The worst case time complexity for comb sort is 
    O(n2). As already explained, such notation means that the time
    complexity will increase in proportion to the square of the input size.
